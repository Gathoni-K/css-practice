body{
    min-height: 800px;
    display: flex;
    gap: 20px;
    border: 8px solid black;



/*
 justify-content: center;
the display and justify-content can be used to center elements in a container
    border: 8px solid black;
*/
/*
    align-items: center; 
-the following code can be used to center a div, the display, justify-content and the align-items
    flex-direction: row;
align items from left to right
    gap: 10px;
-creates spacing between our elements */
/*
    flex-wrap: wrap;
-creates a responsive layout that allows us to move items to next line when there is no space
    align-content: space-around;
    column-gap: 10px;
    row-gap: 20px;
-can be used to set different gap values for the rows and columns*/ 

   
}
/*
There is the main(x-axis) and the cross axis(y-axis) in our flex container
-To position elements in the main axis, use the 'justify-content'
'justify-content': space-around - space all around our elements
                   space-between - space between elements, fisst and last element touch corner of our screen
                   center - center our elements.
                   space-evenly - space even all around
                   flex-start - items at the start of our container
                   flex-end - items at the end of our container.
    ****This is arranging the items horizontally
-To align items vertically, use the 'align-items' property
'flex-direction': row-reverse - align items from right to left.
                  column - elements go from top to bottom, on top of each other
 **controls the direction of the main axis
'flex-wrap' : nowrap - the items shrink with the screen,


*/

/*
To get perfectly centered elements, set justify-content, align-content
and align-items to center, flex-wrap to wrap
*/



.box{
    height: 200px;
    width: 200px;
    max-width: 300px;
    background-color: #0071FF;
    font-size: 40px;
    display: flex;
    align-items: center;
    justify-content: center;
/*  
 flex-shrink: 0;
 
-the boxes do not shrink when shrinking the screen
setting the value to '1' - allows the items to shrink.
1 is the default value.
*/
    flex-grow: 0;
}
#box-1{
/*
 flex-shrink: 0;

-all the elements will shrink apart from this one.
-can be used on images that you do not want to shrink
*/
    flex-grow: 1;
/*
makes the elements stretch relative to the main axis
-0 is the default value for this.
-different values can be used to control how much of the empty space they occupy
 
*/
}

@media(max-width: 575px) {
/*the media query helps us deal with the overflow*/
    body{
        flex-wrap: wrap;
    }
}

/*
justify content - main-axis alignment(x-axis)
align items- cross-axis alignement
flex-wrap - responsive line breaks
flex-shrink - allow items to get smaller
flex-grow - allow items to get bigger
min-width and max-width - limit flex-grow and shrink*/